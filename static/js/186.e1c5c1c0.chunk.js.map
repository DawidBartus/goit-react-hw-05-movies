{"version":3,"file":"static/js/186.e1c5c1c0.chunk.js","mappings":"kOAuCA,UAlCgB,WACd,OAA2BA,EAAAA,EAAAA,UAAS,IAApC,eAAOC,EAAP,KAAiBC,EAAjB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,IAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,qGACOC,EAAAA,EAAAA,IAAkBJ,GADzB,OACTK,EADS,OAGfN,EAAOM,GAHQ,2CAAH,qDAKdF,GACD,GAAE,CAACH,IAEJ,IAAQM,EAA2BR,EAA3BQ,QAASC,EAAkBT,EAAlBS,cACjB,OACE,yBACGA,EACCD,EAAQE,KAAI,SAAAC,GACV,OACE,4BACE,uBAAIA,EAAIC,UACR,uBAAID,EAAIE,aAFAC,EAAAA,EAAAA,MAKb,KAED,iGAMP,C,uDCpCM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACjB,EAAIkB,GAWvD,OARElB,IAFFkB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from '../fetchAPI';\nimport { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\n\nconst Reviews = () => {\n  const [movieRev, setRev] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchRev = async () => {\n      const details = await fetchMovieReviews(id);\n\n      setRev(details);\n    };\n    fetchRev();\n  }, [id]);\n\n  const { results, total_results } = movieRev;\n  return (\n    <div>\n      {total_results ? (\n        results.map(rev => {\n          return (\n            <div key={nanoid()}>\n              <p>{rev.author}</p>\n              <p>{rev.content}</p>\n            </div>\n          );\n        })\n      ) : (\n        <p>\n          There's no single review added to this movie. Feel free to add your.\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","movieRev","setRev","id","useParams","useEffect","fetchRev","fetchMovieReviews","details","results","total_results","map","rev","author","content","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}