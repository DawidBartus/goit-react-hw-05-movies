{"version":3,"file":"static/js/76.db53e408.chunk.js","mappings":"6PACA,EAA2B,uB,kBCsE3B,EAhEa,WACX,OAA6BA,EAAAA,EAAAA,UAAS,IAAtC,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,IAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,qGACGC,EAAAA,EAAAA,IAAkBJ,GADrB,OACbK,EADa,OAGnBR,EAAQQ,GACRN,GAAW,GAJQ,2CAAH,qDAMlBI,GACD,GAAE,CAACH,IAEJ,IAAQM,EAASV,EAATU,KAER,OACE,8BACGR,GACC,+BACE,iBAAKS,UAAWC,EAAAA,EAAAA,SAAhB,WACE,oBACA,oBACA,oBACA,yBAIJ,8BACGF,GACC,+BACE,eAAIC,UAAWE,EAAf,SACGH,EAAKI,KAAI,SAAAC,GACR,OACE,2BACE,gBACEC,IACED,EAAME,aAAN,yCACsCF,EAAME,cAD5C,8EAIFC,IAAG,UAAKH,EAAMI,MACdC,MAAO,IACPC,OAAQ,OAEV,kCAAUN,EAAMI,WAXTG,EAAAA,EAAAA,MAcZ,SAIL,2GASX,C,uDCpEM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACvB,EAAIwB,GAWvD,OARExB,IAFFwB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__ARoWn\"};","import { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from '../utils/fetchAPI';\nimport { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport style from './Cast.module.css';\nimport loader from '../utils/loader.module.css';\n\nconst Cast = () => {\n  const [movieCast, setCast] = useState([]);\n  const [loading, setloading] = useState(true);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchDetails = async () => {\n      const details = await fetchMovieCredits(id);\n\n      setCast(details);\n      setloading(false);\n    };\n    fetchDetails();\n  }, [id]);\n\n  const { cast } = movieCast;\n\n  return (\n    <>\n      {loading ? (\n        <>\n          <div className={loader.lds_ring}>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n        </>\n      ) : (\n        <>\n          {cast ? (\n            <>\n              <ul className={style.castList}>\n                {cast.map(actor => {\n                  return (\n                    <li key={nanoid()}>\n                      <img\n                        src={\n                          actor.profile_path\n                            ? `https://image.tmdb.org/t/p/w185${actor.profile_path}`\n                            : `https://upload.wikimedia.org/wikipedia/commons/a/ad/Placeholder_no_text.svg`\n                        }\n                        alt={`${actor.name}`}\n                        width={150}\n                        height={225}\n                      />\n                      <p>Name: {actor.name}</p>\n                    </li>\n                  );\n                })}\n              </ul>\n            </>\n          ) : (\n            <p>\n              Our trolls didn't add actors from this movie. They'll be working\n              on it soon.\n            </p>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","movieCast","setCast","loading","setloading","id","useParams","useEffect","fetchDetails","fetchMovieCredits","details","cast","className","loader","style","map","actor","src","profile_path","alt","name","width","height","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}