{"version":3,"file":"static/js/168.626400af.chunk.js","mappings":"+PACA,EAAiC,gCAAjC,EAAkF,gCAAlF,EAAkI,+B,kBCwDlI,EAlDgB,WACd,OAA2BA,EAAAA,EAAAA,UAAS,IAApC,eAAOC,EAAP,KAAiBC,EAAjB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,qGACOC,EAAAA,EAAAA,IAAkBN,GADzB,OACTO,EADS,OAGfR,EAAOQ,GACPJ,GAAW,GAJI,2CAAH,qDAMdE,GACD,GAAE,CAACL,IAEJ,IAAQQ,EAA2BV,EAA3BU,QAASC,EAAkBX,EAAlBW,cACjB,OACE,8BACGP,GACC,+BACE,iBAAKQ,UAAWC,EAAAA,EAAAA,SAAhB,WACE,oBACA,oBACA,oBACA,yBAIJ,eAAID,UAAWE,EAAf,SACGH,EACCD,EAAQK,KAAI,SAAAC,GACV,OACE,gBAAmBJ,UAAWE,EAA9B,WACE,cAAGF,UAAWE,EAAd,SAAoCE,EAAIC,UACxC,uBAAID,EAAIE,aAFDC,EAAAA,EAAAA,MAKZ,KAED,mGASX,C,uDCtDM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACtB,EAAIuB,GAWvD,OAREvB,IAFFuB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviewsComList\":\"Reviews_reviewsComList__Fgzlx\",\"reviewsComElem\":\"Reviews_reviewsComElem__qTHE7\",\"reviewsAuthor\":\"Reviews_reviewsAuthor__vf7dl\"};","import { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from '../utils/fetchAPI';\nimport { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport style from './Reviews.module.css';\nimport loader from '../utils/loader.module.css';\n\nconst Reviews = () => {\n  const [movieRev, setRev] = useState([]);\n  const { id } = useParams();\n  const [loading, setloading] = useState(true);\n\n  useEffect(() => {\n    const fetchRev = async () => {\n      const details = await fetchMovieReviews(id);\n\n      setRev(details);\n      setloading(false);\n    };\n    fetchRev();\n  }, [id]);\n\n  const { results, total_results } = movieRev;\n  return (\n    <>\n      {loading ? (\n        <>\n          <div className={loader.lds_ring}>\n            <div></div>\n            <div></div>\n            <div></div>\n            <div></div>\n          </div>\n        </>\n      ) : (\n        <ul className={style.reviewsComList}>\n          {total_results ? (\n            results.map(rev => {\n              return (\n                <li key={nanoid()} className={style.reviewsComElem}>\n                  <p className={style.reviewsAuthor}>{rev.author}</p>\n                  <p>{rev.content}</p>\n                </li>\n              );\n            })\n          ) : (\n            <p>\n              There's no single review added to this movie. Feel free to add\n              your.\n            </p>\n          )}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","movieRev","setRev","id","useParams","loading","setloading","useEffect","fetchRev","fetchMovieReviews","details","results","total_results","className","loader","style","map","rev","author","content","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}